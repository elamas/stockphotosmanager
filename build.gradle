plugins {
	id 'org.springframework.boot' version '2.1.9.RELEASE'
	id 'io.spring.dependency-management' version '1.0.8.RELEASE'
	id 'java'
	id "org.sonarqube" version "2.7"
	id "jacoco"
}

group = 'stockphotosmanager'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	//runtimeOnly 'mysql:mysql-connector-java'
	//para que me funcione en la lamnda
	compile group: 'mysql', name: 'mysql-connector-java', version: '8.0.17'
	compile group: 'com.amazonaws', name: 'aws-java-sdk-rekognition', version: '1.11.569'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	//testCompile group: 'com.h2database', name: 'h2', version: '1.4.199'
	//compile group: 'com.h2database', name: 'h2', version: '1.4.199'
	
	compile group: 'com.amazonaws', name: 'aws-lambda-java-core', version: '1.2.0'
	compile group: 'com.amazonaws', name: 'aws-lambda-java-events', version: '2.2.7'
	compile group: 'com.amazonaws', name: 'aws-java-sdk-s3', version: '1.11.656'
	compile group: 'com.amazonaws', name: 'aws-java-sdk-lambda', version: '1.11.656'
	
	compile group: 'commons-io', name: 'commons-io', version: '2.6'	
}

test {
	//para que me muestre resumen del numero de test lanzados, existosos y demas
  testLogging {
    afterSuite { desc, result ->
      if (!desc.parent) { // will match the outermost suite
        println "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
      }
    }
  }
  
    filter {
    	//if (testsType != null) {
    	if (project.properties['testsType'] != null && project.properties['testsType'].equals("integration")) {
    		System.err.println("+++++++++ [build.gradle]testsType: " + testsType);
    		System.err.println("+++++++++ Lanzando tests de integracion");
    		includeTestsMatching "integration.*"
    	} else {
    		System.err.println("+++++++++ [build.gradle]testsType not defined");
    		System.err.println("+++++++++ Lanzando tests unitarios");
    		includeTestsMatching "unit.*"
    	}
    	
    	//System.err.println("+++++++++ [build.gradle]getIncludePatterns(): " + getIncludePatterns());
    	/*
    	System.err.println("+++++++++ System.properties begin +++++++++++");
        //for (Map.Entry<Object, Object> entry : properties.entrySet()) {
          //  System.out.println(entry.getKey() + " : " + entry.getValue());
        //}

		Properties p = System.getProperties();
		Enumeration keys = p.keys();
		while (keys.hasMoreElements()) {
		    String key = (String)keys.nextElement();
		    String value = (String)p.get(key);
		    System.out.println(key + ": " + value);
		}
        System.err.println("+++++++++ System.properties ebd +++++++++++");
        */
            	
        //include all tests from package
        //includeTestsMatching "unit.*"
    }

}

/*
test {
    testLogging {
        // Make sure output from
        // standard out or error is shown
        // in Gradle output.
        showStandardStreams = true
 
        // Or we use events method:
        // events 'standard_out', 'standard_error'
 
        // Or set property events:
        // events = ['standard_out', 'standard_error']
 
        // Instead of string values we can
        // use enum values:
        // events org.gradle.api.tasks.testing.logging.TestLogEvent.STANDARD_OUT,
        //        org.gradle.api.tasks.testing.logging.TestLogEvent.STANDARD_ERROR,
    }
}
*/

//para lambda
task buildZip(type: Zip) {
    from compileJava
    from processResources              
    into('lib') {
        from configurations.compileClasspath
    }           
}
build.dependsOn buildZip